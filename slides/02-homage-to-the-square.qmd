---
title: "Steal like an Rtist: Creative Coding in R"
subtitle: "Homage to the Square<br>Josef Albers"
author: "Ijeamaka Anyene Fumagalli and Sharla Gelfand"
institute: "`posit::conf(2023)`"
pagetitle: "Homage to the Square"
format:
  revealjs:
    theme: [default, css/style.scss]
highlight-style: "ayu"
execute:
  echo: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(cache = TRUE, dev = "png", dev.args = list(bg = "transparent"))
```

#

<div class = "columns">

  <div class = "column" style = "width:51%">

![*Homage to the Square – Ascending*, 1953](02-homage-to-the-square/HomageToTheSquareAscending.png)

  </div>

  <div class = "column" style = "width:49%">
![Josef Albers, 1966, by Yousuf Karsh](02-homage-to-the-square/Yousuf-Karsh-Josef-Albers-1966.jpg)
  </div>

</div>

::: {.notes}
Josef Albers was a prominent German artist in the 20th century

Educator at Bauhaus, Black Mountain College in North Carolina, and Yale

Expert at studying and teaching color

Series of paintings from 1950 to 1976 focused on color

Recreating the one pictured here
:::

---

![&nbsp;](02-homage-to-the-square/Homage-to-the-square-set.jpg)

::: {.notes}
Thousands of paintings

Applied color directly from the tube with a palette knife, not traditionally "painted"

All of the colors, etc, codified on the backs of the paintings

Exploring color and relationships, subjectivity
:::

---

<div class = "columns">

  <div class = "column">

![*Homage to the Square – Ascending*, 1953](02-homage-to-the-square/HomageToTheSquareAscending.png)

  </div>

  <div class = "column" style="width:49%">
 <video controls>
  <source src="02-homage-to-the-square/homage-video.mp4" type="video/mp4">
</video> 

</div>

</div>

---

<div class = "columns">
  <div class = "column">
  
![](02-homage-to-the-square/homage-sketch-full.jpg)
    
  </div>
  
  <div class = "column">
  
![](02-homage-to-the-square/homage-sketch-x0y0-x1y1.jpg)
    
  </div>
</div>  

## Creating a rectangle in {ggplot2}
  
### `geom_rect()`

Use arguments to map data to visual properties

* `xmin`, `xmax`: minimum and maximum `x` values
* `ymin`, `ymax`: minimum and maximum `y` values
* `fill`: color

## Creating a rectangle in {ggplot2}
  
### `geom_rect()`
  
```{r}
#| output-location: column-fragment
#| out-width: 100%
#| fig-format: svg
library(ggplot2)

ggplot() +
  geom_rect(
    aes(
      xmin = 3, xmax = 7,
      ymin = 1.5, ymax = 5.5
    ),
    fill = "#F5BB1D"
  )
```

## Recreate

<div class = "columns">

  <div class = "column">

```{r, eval = FALSE}
#| code-line-numbers: "5"
library(dplyr)

homage <- tribble(
  ~x0, ~y0, ~size,    ~color,
    0,   0,    10, "#5A9CBA",
    1, 0.5,     8, "#919EA3",
    2,   1,     6, "#F1EFDF",
    3, 1.5,     4, "#F5BB1D"
  ) %>%
  mutate(
    x1 = x0 + size,
    y1 = y0 + size
  )

homage
```

  </div>

  <div class = "column">
  
![](02-homage-to-the-square/homage-sketch-1.jpg)
  </div>

</div>

## Recreate

<div class = "columns">

  <div class = "column">

```{r, eval = FALSE}
#| code-line-numbers: "6"
library(dplyr)

homage <- tribble(
  ~x0, ~y0, ~size,    ~color,
    0,   0,    10, "#5A9CBA",
    1, 0.5,     8, "#919EA3",
    2,   1,     6, "#F1EFDF",
    3, 1.5,     4, "#F5BB1D"
  ) %>%
  mutate(
    x1 = x0 + size,
    y1 = y0 + size
  )

homage
```

  </div>

  <div class = "column">
  
![](02-homage-to-the-square/homage-sketch-2.jpg)
  </div>

</div>

## Recreate

<div class = "columns">

  <div class = "column">

```{r, eval = FALSE}
#| code-line-numbers: "7"
library(dplyr)

homage <- tribble(
  ~x0, ~y0, ~size,    ~color,
    0,   0,    10, "#5A9CBA",
    1, 0.5,     8, "#919EA3",
    2,   1,     6, "#F1EFDF",
    3, 1.5,     4, "#F5BB1D"
  ) %>%
  mutate(
    x1 = x0 + size,
    y1 = y0 + size
  )

homage
```

  </div>

  <div class = "column">
  
![](02-homage-to-the-square/homage-sketch-3.jpg)
  </div>

</div>

## Recreate

<div class = "columns">

  <div class = "column">

```{r, eval = FALSE}
#| code-line-numbers: "8"
library(dplyr)

homage <- tribble(
  ~x0, ~y0, ~size,    ~color,
    0,   0,    10, "#5A9CBA",
    1, 0.5,     8, "#919EA3",
    2,   1,     6, "#F1EFDF",
    3, 1.5,     4, "#F5BB1D"
  ) %>%
  mutate(
    x1 = x0 + size,
    y1 = y0 + size
  )

homage
```

  </div>

  <div class = "column">
  
![](02-homage-to-the-square/homage-sketch-4.jpg)
  </div>

</div>

## Recreate

<div class = "columns">

  <div class = "column">

```{r eval = FALSE}
#| code-line-numbers: "11,12"
library(dplyr)

homage <- tribble(
  ~x0, ~y0, ~size,    ~color,
    0,   0,    10, "#5A9CBA",
    1, 0.5,     8, "#919EA3",
    2,   1,     6, "#F1EFDF",
    3, 1.5,     4, "#F5BB1D"
  ) %>%
  mutate(
    x1 = x0 + size,
    y1 = y0 + size
  )

homage
```

  </div>

  <div class = "column">
  
![](02-homage-to-the-square/homage-sketch-full.jpg)
  </div>

</div>

## Recreate

<div class = "columns">

  <div class = "column">

```{r}
library(dplyr)

homage <- tribble(
  ~x0, ~y0, ~size,    ~color,
    0,   0,    10, "#5A9CBA",
    1, 0.5,     8, "#919EA3",
    2,   1,     6, "#F1EFDF",
    3, 1.5,     4, "#F5BB1D"
  ) %>%
  mutate(
    x1 = x0 + size,
    y1 = y0 + size
  )

homage
```

  </div>

  <div class = "column">
  
![](02-homage-to-the-square/homage-sketch-x0y0-x1y1.jpg)
  </div>

</div>

## Recreate

```{r}
#| output-location: column
#| code-line-numbers: "3,4,5,6"
#| out-width: 75%
#| fig-align: center
homage_p <- ggplot(homage) +
  geom_rect(aes(
    xmin = x0,
    xmax = x1,
    ymin = y0,
    ymax = y1,
    fill = color
  ))

homage_p
```

## Recreate

```{r}
#| output-location: column
#| code-line-numbers: "7"
#| out-width: 75%
#| fig-align: center
homage_p <- ggplot(homage) +
  geom_rect(aes(
    xmin = x0,
    xmax = x1,
    ymin = y0,
    ymax = y1,
    fill = color
  ))

homage_p
```

::: notes
ggplot2 thinks color is a categorical variable that needs to be represented by a fill color
::::

## Recreate

```{r}
#| output-location: column
#| code-line-numbers: "9"
#| out-width: 75%
#| fig-align: center
homage_p <- ggplot(homage) +
  geom_rect(aes(
    xmin = x0,
    xmax = x1,
    ymin = y0,
    ymax = y1,
    fill = color
  )) +
  scale_fill_identity()

homage_p
```

`scale_fill_identity()` tells ggplot2 the variable in `color` is a color value it can use directly, not a categorical variable that needs to be represented by a fill color

## Recreate

```{r}
#| output-location: column
#| code-line-numbers: "10"
#| fig-asp: 1
#| out-width: 75%
#| fig-align: center
homage_p <- ggplot(homage) +
  geom_rect(aes(
    xmin = x0,
    xmax = x1,
    ymin = y0,
    ymax = y1,
    fill = color
  )) +
  scale_fill_identity() +
  coord_fixed()

homage_p
```

`coord_fixed()` sets a fixed coordinate system, with an aspect ratio of 1, to ensure one unit on the x-axis is the same as one unit on the y-axis (aka: a square is a square)

## Recreate

```{r, dev = "png", dev.args = list(bg = "white")}
#| output-location: column
#| code-line-numbers: "11"
#| fig-asp: 1
#| out-width: 75%
#| fig-align: center
homage_p <- ggplot(homage) +
  geom_rect(aes(
    xmin = x0,
    xmax = x1,
    ymin = y0,
    ymax = y1,
    fill = color
  )) +
  scale_fill_identity() +
  coord_fixed() +
  theme_void()

homage_p
```

`theme_void()` is a completely empty theme, creating a blank canvas for us to work on

## Recreate

```{r, dev = "png", dev.args = list(bg = "white")}
#| output-location: column
#| code-line-numbers: "10"
#| fig-asp: 1
#| out-width: 75%
#| fig-align: center
homage_p <- ggplot(homage) +
  geom_rect(aes(
    xmin = x0,
    xmax = x1,
    ymin = y0,
    ymax = y1,
    fill = color
  )) +
  scale_fill_identity() +
  coord_fixed(expand = FALSE) +
  theme_void()

homage_p
```

`coord_fixed()` with `expand = FALSE` removes any margin

## Save your work

::: notes
go to Rstudio
:::

<div class = "columns">

  <div class = "column">

```{r, echo = FALSE}
ggsave("02-homage-to-the-square/homage_rect_temp.jpg", homage_p, bg = "black")
```

```{r, eval = FALSE}
ggsave("homage.png",
  homage_p,
  bg = "black"
)
```
  </div>

  <div class = "column">

![](02-homage-to-the-square/homage_rect_temp.jpg)

  </div>

</div>

. . .

vs according to the actual dimensions of the work

<div class = "columns">

  <div class = "column">

```{r, echo = FALSE}
ggsave("02-homage-to-the-square/homage_square_temp.jpg", homage_p, width = 5, height = 5, bg = "black")
```

```{r, eval = FALSE}
ggsave("homage_square.png",
  homage_p,
  width = 5,
  height = 5,
  bg = "black"
)
```
  </div>

  <div class = "column">
  
```{r echo=FALSE}
#| out-width: 50%
#| fig-align: center
knitr::include_graphics("02-homage-to-the-square/homage_square_temp.jpg")
```

  </div>

</div>

## Recreation done!

::: {layout-ncol=2}

![*Homage to the Square – Ascending*, 1953](02-homage-to-the-square/HomageToTheSquareAscending.png)

![*Homage to the Square – Ascending*, recreation, 2023](02-homage-to-the-square/homage_square_temp.jpg)

:::

# What is generative art?

"Generative art operates within [a rule structure]{.under} but has [an element of chance]{.under} that is crucial to what many artists enjoy about it. The final work is partly produced by an [autonomous system]{.under}, which may be strictly regulated by the rules or operate within parameters."

--- Charlotte Kent, Beyond the Janus-Faced Typologies of Art and Technology

::: notes
Done with recreation, how do we move on to remix it? Create a generative art system
:::

# What is generative art?

```{r echo=FALSE}
#| fig-align: center
knitr::include_graphics("02-homage-to-the-square/generative-art.png")
```

## Remix time! Creating a small system

```{r}
#| code-line-numbers: "1,12"
make_homage <- function(colors = c("#5A9CBA", "#919EA3", "#F1EFDF", "#F5BB1D")) {
  tribble(
   ~x0, ~y0, ~size,
     0,   0,    10,
     1, 0.5,     8,
     2,   1,     6,
     3, 1.5,     4
   ) %>%
    mutate(
      x1 = x0 + size,
      y1 = y0 + size,
      color = sample(colors, size = 4)
    ) %>%
    ggplot() +
    geom_rect(aes(
      xmin = x0, xmax = x1,
      ymin = y0, ymax = y1,
      fill = color
    )) +
    scale_fill_identity() +
    coord_fixed() +
    theme_void()
}
```

## Remix time! Creating a small system

```{r}
#| output-location: column
make_homage()
```

. . . 

```{r}
#| output-location: column
make_homage()
```

::: notes
Each call of the function creates a different output, since the order of the colors is sampled
:::

## `set.seed()`

::: notes
What if you like an output?
:::

Setting a seed controls the state of the random number generator in R

```{r}
#| output-location: column
set.seed(1234)

make_homage()
```

. . .

```{r}
#| output-location: column
set.seed(1234)

make_homage()
```

::: notes
Setting the same seed creates the same output, since the random number generator is at the same "state" each time the sample is taken
:::

## Your turn!

::: {.exercise}

1. Open the file `exercises/02-homage-to-the-square/exercise-1.Rmd`
2. Update the function `make_my_homage()` to take a `seed` argument, and set the seed in the body of the function
3. Verify that running `make_my_homage()` with the same `seed` creates the same output, and that with a different seeds creates different outputs
4. Share an output and the seed that created it in the GitHub discussion for this exercise
:::

## Composition
  
Deliberately simple and consistent in structure, the nested squares were a platform for exploring color.
  
*Homages* are all about mutability of color relationships and the malleability of subjective perceptions of colors.

![*Planes and Frames: Spatial Layering in Josef Albers' Homage to the Square Paintings*, J. Mai, 2016](02-homage-to-the-square/schemata.png)

::: notes
Series was based on mathematically determined format - we can appreciate this!
:::

---

```{r include = FALSE}
make_homage <- function(seed = 1, colors = c("#5A9CBA", "#919EA3", "#F1EFDF", "#F5BB1D")) {
  set.seed(seed)

  tribble(
   ~x0, ~y0, ~size,
     0,   0,    10,
     1, 0.5,     8,
     2,   1,     6,
     3, 1.5,     4
   ) %>%
    mutate(
      x1 = x0 + size,
      y1 = y0 + size,
      color = sample(colors, size = 4)
    ) %>%
    ggplot() +
    geom_rect(aes(
      xmin = x0, xmax = x1,
      ymin = y0, ymax = y1,
      fill = color
    )) +
    scale_fill_identity() +
    coord_fixed() +
    theme_void()
}
```

:::: {.columns}

::: {.column width="33%"}

```{r, echo = FALSE}
#| fig-asp: 1
make_homage(1)
make_homage(2)
```

:::

::: {.column width="33%"}

```{r, echo = FALSE}
#| fig-asp: 1
make_homage(3)
make_homage(4)
```

:::

::: {.column width="33%"}

```{r, echo = FALSE}
#| fig-asp: 1
make_homage(5)
make_homage(6)
```

:::

::::

::: notes
Original is top middle - how do different ones affect how we see the piece, how the colors interact? Visual effect
:::

# Color

# 

::: {layout-ncol=4}

![](02-homage-to-the-square/homage-color-1.jpg)

![](02-homage-to-the-square/homage-color-2.jpg)

![](02-homage-to-the-square/homage-color-3.jpg)

![](02-homage-to-the-square/homage-color-4.jpg)

![](02-homage-to-the-square/homage-color-5.jpg)

![](02-homage-to-the-square/homage-color-6.jpg)

![](02-homage-to-the-square/homage-color-7.jpg)

![](02-homage-to-the-square/homage-color-8.jpg)

:::

::: {.notes}

Albers started with neutrals, exploring the relative lightness and darkness of colors

He sought the yellow tint in white, the blue and brown in black -> impurities of white and black on screen vs life

He explored how grey can be violet, how opposite colors accentuate each other, how some colors seem brighter than others
:::


## Hex

An opaque but common format of representing color

```{r}
#| fig-asp: 0.4
#| out-width: 40%
library(scales)

palette <- c("#4d5a0b", "#f37f92", "#f49346", "#ffcd84")

show_col(palette)
```

. . .

"#5A9CBA" is one of the colors we used before - what is it?

## RGB

How much red, green, and blue make up a color (0 to 255)

```{r}
mystery_color <- "#5A9CBA"

col2rgb(mystery_color)
```

::: notes
What does this actually tell you? It's not so red, it's kinda green, and more blue?
:::

## HSL

::: notes
HSL is a clearer color system that is easier for a human to understand

Also easier to alter colors
:::

:::: {.columns}

::: {.column width="33%"}

### Hue

Color on the color wheel

(0 to 360)

:::

::: {.column width="33%"}

### Saturation

Vividness, how much of the color is actually present

From grey to full saturation of the color (0% to 100%)

:::

::: {.column width="33%"}

### Lightness

How light/bright the color is

From black to white (0% to 100%)

:::

::::

:::: {.columns}

::: {.column width="33%"}

```{r, echo = FALSE}
#| fig-asp: 1
library(dplyr)
library(prismatic)

hsl_to_hex <- function(data) {
  data_scaled <- data %>%
    mutate(
      s = s / 100,
      l = l / 100
    )

  data_t <- data_scaled %>%
    t()

  hex_res <- plotwidgets::hsl2col(data_t)
  hex_res <- color(hex_res)

  data %>%
    mutate(color = hex_res)
}

palette <- rev(c("#df031d", "#ed8e00", "#fef200", "#93c82f", "#02adf2"))

tibble(color = palette) %>%
  mutate(y = row_number()) %>%
  ggplot() +
  geom_rect(aes(ymin = y, ymax = y + 1, xmin = 5, xmax = 8, fill = color), color = "black") +
  scale_fill_identity() +
  theme_void() +
  coord_fixed()
```

:::

::: {.column width="33%"}

```{r, echo = FALSE}
#| fig-asp: 1
tibble(
  s = seq(0, 100, length.out = 5)
) %>%
  mutate(h = 35, l = 50) %>%
  select(h, s, l) %>%
  hsl_to_hex() %>%
  mutate(y = row_number()) %>%
  ggplot() +
  geom_rect(aes(ymin = y, ymax = y + 1, xmin = 5, xmax = 8, fill = color), color = "black") +
  scale_fill_identity() +
  theme_void() +
  coord_fixed()
```


:::

::: {.column width="33%"}

```{r, echo = FALSE}
#| fig-asp: 1
tibble(
  l = seq(0, 100, length.out = 5)
) %>%
  mutate(h = 35, s = 80) %>%
  select(h, s, l) %>%
  hsl_to_hex() %>%
  mutate(y = row_number()) %>%
  ggplot() +
  geom_rect(aes(ymin = y, ymax = y + 1, xmin = 5, xmax = 8, fill = color), color = "black") +
  scale_fill_identity() +
  theme_void() +
  coord_fixed()
```

:::

::::

## Hue 

```{r, echo = FALSE, dpi=300}
hue_seq <- seq(0, 360, by = 0.5)
color_wheel <- tibble(h = hue_seq, s = 100, l = 50) %>%
  hsl_to_hex() %>%
  filter(h < 360) %>%
  ggplot() +
  geom_rect(aes(xmin = h, xmax = h + 1, ymin = 5, ymax = 10, fill = color)) +
  scale_color_identity() +
  scale_fill_identity() +
  scale_y_continuous(limits = c(0, 10), labels = NULL, name = NULL) +
  scale_x_continuous(breaks = c(0, 60, 120, 180, 240, 300), name = NULL) +
  coord_polar() +
  theme_minimal(base_size = 20) +
  theme(panel.grid = element_blank(), axis.text.x = element_text(color = "black"))

color_wheel
```

## Hue
:::: {.columns}

::: {.column}
```{r}
library(prismatic)

mystery_color <- color(mystery_color)

color(mystery_color) %>%
  clr_extract_hue()
```
:::

```{r, echo = FALSE}
h <- mystery_color %>%
  clr_extract_hue()
```

::: {.column}
<div class = "fragment">
```{r, echo = FALSE}
#| fig-asp: 1
# For some reason using h doesn't work - just code it in directly
color_wheel +
  geom_segment(aes(x = 198.75, xend = 198.75, y = 5, yend = 10), linetype = "dashed", alpha = 0.75) +
  theme_minimal(base_size = 30) +
  theme(panel.grid = element_blank(), axis.text.x = element_text(color = "black"))
```
</div>
:::

::::

## Hue

:::: {.columns}

::: {.column}
```{r}
mystery_color %>%
  clr_rotate(degrees = 100)
```
:::

::: {.column}
```{r, echo = FALSE}
#| fig-asp: 1
# For some reason using h doesn't work - just code it in directly
color_wheel +
  geom_segment(aes(x = 298.75, xend = 298.75, y = 5, yend = 10), linetype = "dashed", alpha = 0.75) +
  theme_minimal(base_size = 30) +
  theme(panel.grid = element_blank(), axis.text.x = element_text(color = "black"))
```
:::

::::

## Saturation

::: notes

Same hue and lightness (50%), saturation from 0% to 100%

:::

::::: {.columns}

:::: {.column width=20%}

```{r, echo = FALSE}
#| fig-asp: 3.5
l <- 50
seq_by <- 10
tibble(
  s = seq(0, 100, by = seq_by)
) %>%
  mutate(h = h, l = l) %>%
  select(h, s, l) %>%
  hsl_to_hex() %>%
  mutate(s_label = scales::percent(s / 100)) %>%
  ggplot() +
  geom_tile(aes(y = s, x = 0, width = seq_by * 1.5, height = seq_by - 2, fill = color)) +
  geom_text(aes(y = s, x = -seq_by * 0.9, label = s_label), hjust = 1, size = 20) +
  scale_fill_identity() +
  coord_fixed(xlim = c(-seq_by * 1.5, seq_by * 0.75)) +
  theme_void()
```

::::

:::: {.column width="80%"}

::: {.fragment}

```{r}
mystery_color %>%
  clr_extract_saturation()
```

:::

::: {.fragment}

<br>

```{r}
#| fig-asp: 0.3
saturated_color <- mystery_color %>%
  clr_saturate(shift = 0.5)

desaturated_color <- mystery_color %>%
  clr_desaturate(shift = 0.5)

c(saturated_color, mystery_color, desaturated_color) %>%
  color() %>%
  plot()
```

:::

::::

:::::

## Saturation

Desaturation generally makes things more interesting... compare to our palette in full saturation

```{r}
#| output-location: column-fragment
#| fig-asp: 0.3
homage[["color"]] %>%
  color() %>%
  clr_saturate(shift = 1) %>%
  plot()
```

<div class = "fragment">
 
```{r echo = FALSE}
#| layout-ncol: 2
#| fig-asp: 0.6
tribble(
  ~x0, ~y0, ~size,
    0,   0,    10,
    1, 0.5,     8,
    2,   1,     6,
    3, 1.5,     4
  ) %>%
  mutate(
    x1 = x0 + size,
    y1 = y0 + size,
    color = c("#5A9CBA", "#919EA3", "#F1EFDF", "#F5BB1D")
  ) %>%
  ggplot() +
  geom_rect(aes(
    xmin = x0, xmax = x1,
    ymin = y0, ymax = y1,
    fill = color
  )) +
  scale_fill_identity() +
  coord_fixed() +
  theme_void()
colors_full_saturation <- homage[["color"]] %>%
  color() %>%
  clr_saturate(shift = 1)

tribble(
  ~x0, ~y0, ~size,
    0,   0,    10,
    1, 0.5,     8,
    2,   1,     6,
    3, 1.5,     4
  ) %>%
  mutate(
    x1 = x0 + size,
    y1 = y0 + size,
    color = colors_full_saturation
  ) %>%
  ggplot() +
  geom_rect(aes(
    xmin = x0, xmax = x1,
    ymin = y0, ymax = y1,
    fill = color
  )) +
  scale_fill_identity() +
  coord_fixed() +
  theme_void()
```

</div>

## Lightness

::: notes

Same hue and saturation (50%), lightness from 0% to 100%

:::

::::: {.columns}

:::: {.column width=20%}

```{r, echo = FALSE}
#| fig-asp: 3.5
s <- 50

tibble(
  l = seq(0, 100, by = 10)
) %>%
  mutate(h = h, s = s) %>%
  select(h, s, l) %>%
  hsl_to_hex() %>%
  mutate(l_label = scales::percent(l / 100)) %>%
  ggplot() +
  geom_tile(aes(y = l, x = 0, width = seq_by * 1.5, height = seq_by - 2, fill = color)) +
  geom_text(aes(y = l, x = -seq_by * 0.9, label = l_label), hjust = 1, size = 20) +
  scale_fill_identity() +
  coord_fixed(xlim = c(-seq_by * 1.5, seq_by * 0.75)) +
  theme_void()
```

::::

:::: {.column width="80%"}

::: {.fragment}

```{r}
mystery_color %>%
  clr_extract_lightness()
```

:::

::: {.fragment}

<br>

```{r}
#| fig-asp: 0.3
#| output-location: fragment
lighter_color <- mystery_color %>%
  clr_lighten(shift = 0.2)

darker_color <- mystery_color %>%
  clr_darken(shift = 0.2)

c(lighter_color, mystery_color, darker_color) %>%
  color() %>%
  plot()
```

:::

::::

:::::

## Back to the *Homages*...

::: notes
Go through each of H, S, L for the different colors

Note that we'll still use hex to specify colors, but HSL is good for understanding, shifting, etc
:::

::: {.columns}

::: {.column}

```{r, eval = FALSE}
homage_hsl <- homage %>%
  mutate(
    color = color(color),
    h = clr_extract_hue(color),
    s = clr_extract_saturation(color),
    l = clr_extract_lightness(color)
  ) %>%
  select(color, h, s, l)

homage_hsl
```

::: fragment
```{r, echo = FALSE}
extract_hsl <- function(data) {
  data %>%
    mutate(
      color = color(color),
      h = clr_extract_hue(color),
      s = clr_extract_saturation(color),
      l = clr_extract_lightness(color)
    ) %>%
    select(color, h, s, l)
}

homage_hsl <- homage %>%
  extract_hsl()

homage_hsl
```

```{r, echo = FALSE}
#| fig-asp: 0.3
plot(homage_hsl[["color"]])
```
:::


:::

::: {.column}

<div class = "fragment">

```{r, echo = FALSE}
#| fig-asp: 1
color_wheel +
  geom_segment(data = homage_hsl, aes(x = h, xend = h, y = 5, yend = 10), linetype = "dashed", alpha = 0.75) +
  theme_minimal(base_size = 30) +
  theme(panel.grid = element_blank(), axis.text.x = element_text(color = "black"))
```

</div>

:::

::::

# Choosing color

Color in data visualization has constraints - representing distinct categories, accessibility

Color in art is different - what emotion are you trying to evoke? What are you trying to draw attention to? What period are you referencing?

How do you know what looks good?

## Monochromatic

Multiple tones of one color

![](02-homage-to-the-square/canva-monochromatic.jpg)

#

:::: {.columns}

::: {.column width=65%}

![*Study for Homage to the Square*, 1972](02-homage-to-the-square/homage-study-1972.jpg)

:::

::: {.column width=35%}

"If one says 'red' (the name of a color) and there are 50 people listening, it can be expected that there will be 50 reds in their minds. And one can be sure that all these reds will be very different."

--- Josef Albers, *Interaction of Color* (1963)

:::

::::

---

![*Study to Homage to the Square - Endless*, 1964](02-homage-to-the-square/homage-study-endless.jpeg)

::: notes
Same yellow from different paint companies
:::

## Monochromatic

::: notes
Provides a subtle and conservative color combination. This is a versatile color combination that is easy to apply to design projects for a harmonious look. 
:::

```{r}
#| output-location: column-fragment
#| fig-asp: 0.4
#| code-line-numbers: "5,7,9"
monochromatic <- tribble(
  ~color,
  mystery_color,
  mystery_color %>% 
    clr_lighten(shift = 0.20),
  mystery_color %>% 
    clr_lighten(shift = 0.40),
  mystery_color %>% 
    clr_lighten(shift = 0.60)
)

plot(monochromatic[["color"]])
```

. . . 

```{r}
#| output-location: column
#| fig-asp: 0.65
make_homage(
  seed = 1,
  colors = monochromatic[["color"]]
)
```

## Analogous

Three colors side by side on the color wheel

![](02-homage-to-the-square/canva-analogous.jpg)

---

![*Homage to the Square: Edition Keller Ia*, 1970](02-homage-to-the-square/homage-edition-keller-la.jpeg)

## Analogous

::: notes
This color combination is versatile, but can be overwhelming. To balance an analogous color scheme, choose one dominant color, and use the others as accents. 
:::

```{r}
#| output-location: column-fragment
#| fig-asp: 0.4
#| code-line-numbers: "7,9"
analogous <- tribble(
  ~color,
  mystery_color %>% 
    clr_lighten(shift = 0.20),
  mystery_color,
  mystery_color %>% 
    clr_rotate(degrees = 30),
  mystery_color %>% 
    clr_rotate(degrees = 60)
)

plot(analogous[["color"]])
```

. . . 

```{r}
#| output-location: column
#| fig-asp: 0.6
make_homage(
  seed = 2,
  colors = analogous[["color"]]
)
```

## Analogous

That was a bit ugly - add contrast in other ways

```{r}
#| output-location: column-fragment
#| fig-asp: 0.4
#| code-line-numbers: "4,7,9"
analogous_better <- tribble(
  ~color,
  mystery_color %>% 
    clr_lighten(shift = 0.50),
  mystery_color,
  mystery_color %>% clr_rotate(degrees = 30) %>%
    clr_lighten(shift = 0.25),
  mystery_color %>% clr_rotate(degrees = 60) %>%
    clr_darken(shift = 0.25)
)

plot(analogous_better[["color"]])
```

. . . 

```{r}
#| output-location: column
#| fig-asp: 0.6
make_homage(
  seed = 3,
  colors = analogous_better[["color"]]
)
```

## Complementary

::: notes
This combination provides a high contrast and high impact color combination – together, these colors will appear brighter and more prominent. 
:::

Two colors on opposite sides of the color wheel

![](02-homage-to-the-square/canva-complementary.jpg)

---

![*Homage to the Square: Earth and Air*, 1965](02-homage-to-the-square/homage-earth-and-air.jpeg)

## Complementary

```{r}
#| output-location: column-fragment
#| fig-asp: 0.4
#| code-line-numbers: "10,11,12"
monochromatic_mini <- tribble(
  ~color,
  mystery_color %>% clr_lighten(shift = 0.20),
  mystery_color
)
complementary <- bind_rows(
  monochromatic_mini,
  monochromatic_mini %>%
    mutate(
      color = clr_rotate(color,
        degrees = 360 / 2
      )
    )
)
plot(complementary[["color"]])
```

. . . 

```{r}
#| output-location: column
#| fig-asp: 0.5
make_homage(
  seed = 3,
  colors = complementary[["color"]]
)
```

## Complementary

Having the same saturation and lightness doesn't always work!

```{r}
#| output-location: column-fragment
#| fig-asp: 0.4
#| code-line-numbers: "4,15,16,17"
monochromatic_mini <- tribble(
  ~color,
  mystery_color %>%
    clr_lighten(shift = 0.75),
  mystery_color
)

complementary <- bind_rows(
  monochromatic_mini,
  monochromatic_mini %>%
    mutate(
      color = clr_rotate(color,
        degrees = 360 / 2
      ),
      color = clr_desaturate(color,
        shift = 0.5
      )
    )
)

plot(complementary[["color"]])
```

## Complementary

Having the same saturation and lightness doesn't always work!

```{r}
#| output-location: column
#| fig-asp: 1
make_homage(
  seed = 3,
  colors = complementary[["color"]]
)
```

## Complementary

```{r, echo = FALSE}
#| fig-asp: 1
#| fig-align: center
color_wheel +
  geom_segment(data = homage_hsl, aes(x = h, xend = h, y = 5, yend = 10), linetype = "dashed", alpha = 0.75)
```

::: notes
This is the hue of the colors of our original piece - not exactly opposite on the color wheel, but very close!
:::

## Triadic

Three colors evenly spaced on the color wheel

::: notes
This provides a high contrast color scheme, but less so than the complementary color combination — making it more versatile. This combination creates bold, vibrant color palettes. 
:::

![](02-homage-to-the-square/canva-triadic.jpg)

## Triadic

```{r}
#| output-location: column-fragment
#| fig-asp: 0.4
#| code-line-numbers: "6,8"
triadic <- tribble(
  ~color,
  mystery_color %>% 
    clr_lighten(shift = 0.20),
  mystery_color,
  mystery_color %>%
    clr_rotate(degrees = 360 / 3),
  mystery_color %>%
    clr_rotate(degrees = 2 * 360 / 3)
)

plot(triadic[["color"]])
```

. . . 

<br>

```{r}
#| output-location: column
#| fig-asp: 0.6
make_homage(
  seed = 5,
  colors = triadic[["color"]]
)
```

## Triadic

```{r}
#| output-location: column-fragment
#| fig-asp: 0.4
#| code-line-numbers: "4,8,11"
triadic <- tribble(
  ~color,
  mystery_color %>% 
    clr_lighten(shift = 0.50),
  mystery_color,
  mystery_color %>%
    clr_rotate(degrees = 360 / 3) %>%
    clr_lighten(0.25),
  mystery_color %>%
    clr_rotate(degrees = 2 * 360 / 3) %>%
    clr_saturate(0.15)
)

plot(triadic[["color"]])
```

. . . 

```{r}
#| output-location: column
#| fig-asp: 0.5
make_homage(
  seed = 5,
  colors = triadic[["color"]]
)
```

## Cool and warm colors

![](02-homage-to-the-square/canva-cool-warm.jpg)

---

![*EK Ic*, 1970](02-homage-to-the-square/homage-ek-ic.jpeg)

# Finding palettes

## What inspires you?

::: {layout="[[128,127,132,158], [117,171,114,186]]" layout-valign="bottom"}

![IKEA, 1984](02-homage-to-the-square/inspo-ikea-1.jpg)

![Studio GdB](02-homage-to-the-square/inspo-studio-gdb.jpg)

![@hyunakimberly](02-homage-to-the-square/inspo-hyunakimberly.jpg)

![Luna Wear](02-homage-to-the-square/inspo-luna-wear.jpg)

![My Bloody Valentine](02-homage-to-the-square/inspo-mbv.jpg)

![Hannah Stahl](02-homage-to-the-square/inspo-hannah-stahl.jpg)

![Can Yang](02-homage-to-the-square/inspo-can-yang.jpg)

![IKEA, 1984](02-homage-to-the-square/inspo-ikea-2.jpg)
:::

::: notes
Furniture, art, clothing, music, movies, nature, books
:::

## What inspires you?

::: {layout-ncol=3}

![](02-homage-to-the-square/inspo-1.jpg)

![](02-homage-to-the-square/inspo-2.jpg)

![](02-homage-to-the-square/inspo-3.jpg)

:::

## When in doubt, steal

::: notes
Show upload and link, good time to show system in R and paste colors in
:::

![[ColorGrab](https://mattdesl.github.io/colorgrab/)](02-homage-to-the-square/colorgrab.jpg)

## Some concrete sources

:::: {.columns}

::: {.column}

* <a href="https://artsexperiments.withgoogle.com/artpalette/" target="_blank">Google Arts & Culture: Art Palette</a>
* <a href="https://www.instagram.com/colours.cafe/" target="_blank">Colours Cafe</a>
* <a href="https://coolors.co/generate" target="_blank">Coolors palette generator</a>
* <a href="https://www.color-hex.com/" target="_blank">color-hex</a>
* <a href="https://mycolor.space/" target="_blank">ColorSpace</a>

:::

::: {.column}

![](02-homage-to-the-square/colours_cafe.jpg)

:::

::::

## Remix

::: {.exercise}
1. Open the file `exercises/02-homage-to-the-square/exercise-2.Rmd`
2. Find an inspiration image and extract colors, or choose a palette from one of the sources above. Make sure you have at least 4 colors!
3. Update the function `make_my_homage()` to take your palette as the default value of the `colors` argument
4. Run the function `make_my_homage()` with a few different seeds and pick your output
5. Share the inspiration and output in the GitHub discussion for this exercise
:::

## Inspired by *Homage to the Square*

![*Seven Basic Colors and All Their Combinations in a Square within a Square: Wall Drawing for Josef Albers (Wall Drawing 1176)*, Sol LeWitt](02-homage-to-the-square/sol-lewitt-1.jpg)

## Reinterpet

::: {.exercise}
1. Take a few minutes to imagine what kind of work you could create inspired by *Homage to the Square*
2. Use whatever tool you like - paper, ggplot2, figma, anything you're comfortable with!
3. Share your work in the GitHub discussion for this exercise
:::

## So far you've...

::: {.recap}
* Learned how to recreate an *Homage to the square* using `geom_rect()`
* Saved work in a good size/resolution using `ggsave()`
* Created your first generative art system and using `set.seed()` to control randomness
* Explored HSL as a color system, and learned how to alter colors using their saturation and lightness
* Learned different methods of choosing cohesive color palettes color: monochromatic, analogous, complementary, triadic
* Found color inspiration and added your personal color touches to the *Homages*
* Imagined what other work you can create using rectangles and color
:::

::: {.notes}
Break during break pls
:::
